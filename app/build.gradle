apply plugin: 'com.android.application'
apply plugin: 'walle'
android {
    compileSdkVersion app.compileSdkVersion
    buildToolsVersion app.buildToolsVersion
    defaultConfig {
        applicationId app.applicationId
        minSdkVersion app.minSdkVersion
        targetSdkVersion app.targetSdkVersion
        versionCode app.versionCode
        versionName app.versionName
        ndk {
            //设置支持的SO库架构
            abiFilters 'armeabi' , 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            Properties properties=new Properties()
            InputStream inputStream= rootProject.file('local.properties').newDataInputStream()
            properties.load(inputStream)
            storeFile file(properties.getProperty('RELEASE_STOREFILE'))
            keyAlias properties.getProperty('RELEASE_KEY_ALIAS')
            keyPassword properties.getProperty('RELEASE_KEY_PASSWORD')
            storePassword properties.getProperty('RELEASE_STOREPASSWORD')

        }
    }
    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        edu {
            minifyEnabled true
//            applicationIdSuffix ".debug"
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            matchingFallbacks = ['release', 'debug']
        }
        debug {
            minifyEnabled true
//            applicationIdSuffix ".debug"
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation supportDependencies.test
    androidTestImplementation supportDependencies.androidTestrunner
    androidTestImplementation supportDependencies.androidTestespresso
    implementation supportDependencies.multidex
    implementation supportDependencies.constraint
    implementation supportDependencies.annotations
    implementation supportDependencies.appCompat
    implementation supportDependencies.design
    implementation thirdDependencies.bugly
    implementation thirdDependencies.walle
    implementation thirdDependencies.bugly
    implementation project(':library')
    if (!isModule.toBoolean()) {
        implementation project(':module_1')
    }
}



walle {
    // 指定渠道包的输出路径
    apkOutputFolder = new File("${project.buildDir}/outputs/channels");
    // 定制渠道包的APK的文件名称
    apkFileNameFormat = '${channel}-${appName}-${packageName}-${buildType}-v${versionName}-${versionCode}-${buildTime}.apk';
    // 渠道配置文件
    channelFile = new File("${project.getProjectDir()}/channel")
}